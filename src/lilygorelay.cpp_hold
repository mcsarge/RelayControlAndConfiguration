#include <Arduino.h>
#include <IotWebConf.h>
#include <IotWebConfUsing.h>
#include <IotWebConfTParameter.h>
#include "Log.h"
#include "lilygorelay.h"

using namespace std;

Measures relayMeasures;

char paramRelayNameLabel[] = "Relay Name";
char paramStateNameLabel[] = "State";
char paramRelayButtonPinNameLabel[] = "Relay Button Pin";
char paramChooseMeasureNameLabel[] = "Choose Measure";
char paramRiseFallNameLabel[] ="Rise/Fall";
char paramFallNameLabel[] ="Relay Fall Value";
char paramRiseNameLabel[] ="Relay Rise Value";

unsigned long lastPressedTime = millis()-700;


RelayParamsBasic relayParamsBasic[]=
{
    {
        RELAY1_PIN,
        iotwebconf::Builder<iotwebconf::TextTParameter<LILYGO_WORD_CONFIG_LEN>>("relay1").label(paramRelayNameLabel).defaultValue("Relay 1").build(),
        iotwebconf::Builder<iotwebconf::CheckboxTParameter>("state1").label(paramStateNameLabel).defaultValue(false).build(),
        iotwebconf::Builder<iotwebconf::IntTParameter<int16_t>>("bp1").label(paramRelayButtonPinNameLabel).defaultValue(RELAY1_BUTTON_PIN).min(0).max(40).step(1).placeholder("0..40").build(),
        iotwebconf::ParameterGroup("Relay 1", "Relay 1")
    },

    {
        RELAY2_PIN,
        iotwebconf::Builder<iotwebconf::TextTParameter<LILYGO_WORD_CONFIG_LEN>>("relay2").label(paramRelayNameLabel).defaultValue("Relay 2").build(),
        iotwebconf::Builder<iotwebconf::CheckboxTParameter>("state2").label(paramStateNameLabel).defaultValue(false).build(),
        iotwebconf::Builder<iotwebconf::IntTParameter<int16_t>>("bp2").label(paramRelayButtonPinNameLabel).defaultValue(RELAY2_BUTTON_PIN).min(0).max(40).step(1).placeholder("0..40").build(),
        iotwebconf::ParameterGroup("Relay 2", "Relay 2")
    },
    {
        RELAY3_PIN,
        iotwebconf::Builder<iotwebconf::TextTParameter<LILYGO_WORD_CONFIG_LEN>>("relay3").label(paramRelayNameLabel).defaultValue("Relay 3").build(),
        iotwebconf::Builder<iotwebconf::CheckboxTParameter>("state3").label(paramStateNameLabel).defaultValue(false).build(),
        iotwebconf::Builder<iotwebconf::IntTParameter<int16_t>>("bp3").label(paramRelayButtonPinNameLabel).defaultValue(RELAY3_BUTTON_PIN).min(0).max(40).step(1).placeholder("0..40").build(),
        iotwebconf::ParameterGroup("Relay 3","Relay 3")
    },
    {
        RELAY4_PIN,
        iotwebconf::Builder<iotwebconf::TextTParameter<LILYGO_WORD_CONFIG_LEN>>("relay4").label(paramRelayNameLabel).defaultValue("Relay 4").build(),
        iotwebconf::Builder<iotwebconf::CheckboxTParameter>("state4").label(paramStateNameLabel).defaultValue(false).build(),
        iotwebconf::Builder<iotwebconf::IntTParameter<int16_t>>("bp4").label(paramRelayButtonPinNameLabel).defaultValue(RELAY4_BUTTON_PIN).min(0).max(40).step(1).placeholder("0..40").build(),
        iotwebconf::ParameterGroup("Relay 4","Relay 4")
    },

#ifdef LILYGORELAY8
    {
        RELAY5_PIN,
        iotwebconf::Builder<iotwebconf::TextTParameter<LILYGO_WORD_CONFIG_LEN>>("relay5").label(paramRelayNameLabel).defaultValue("Relay 5").build(),
        iotwebconf::Builder<iotwebconf::CheckboxTParameter>("state5").label(paramStateNameLabel).defaultValue(false).build(),
        iotwebconf::Builder<iotwebconf::IntTParameter<int16_t>>("bp5").label(paramRelayButtonPinNameLabel).defaultValue(RELAY5_BUTTON_PIN).min(0).max(40).step(1).placeholder("0..40").build(),
        iotwebconf::ParameterGroup("Relay 5","Relay 5")
    },
    {
        RELAY6_PIN,
        iotwebconf::Builder<iotwebconf::TextTParameter<LILYGO_WORD_CONFIG_LEN>>("relay6").label(paramRelayNameLabel).defaultValue("Relay 6").build(),
        iotwebconf::Builder<iotwebconf::CheckboxTParameter>("state6").label(paramStateNameLabel).defaultValue(false).build(),
        iotwebconf::Builder<iotwebconf::IntTParameter<int16_t>>("bp6").label(paramRelayButtonPinNameLabel).defaultValue(RELAY6_BUTTON_PIN).min(0).max(40).step(1).placeholder("0..40").build(),
        iotwebconf::ParameterGroup("Relay 6","Relay 6")
    },
    {
        RELAY7_PIN,
        iotwebconf::Builder<iotwebconf::TextTParameter<LILYGO_WORD_CONFIG_LEN>>("relay7").label(paramRelayNameLabel).defaultValue("Relay 7").build(),
        iotwebconf::Builder<iotwebconf::CheckboxTParameter>("state7").label(paramStateNameLabel).defaultValue(false).build(),
        iotwebconf::Builder<iotwebconf::IntTParameter<int16_t>>("bp7").label(paramRelayButtonPinNameLabel).defaultValue(RELAY7_BUTTON_PIN).min(0).max(40).step(1).placeholder("0..40").build(),
        iotwebconf::ParameterGroup("Relay 7","Relay 7")
    },
    {
        RELAY8_PIN,
        iotwebconf::Builder<iotwebconf::TextTParameter<LILYGO_WORD_CONFIG_LEN>>("relay8").label(paramRelayNameLabel).defaultValue("Relay 8").build(),
        iotwebconf::Builder<iotwebconf::CheckboxTParameter>("state8").label(paramStateNameLabel).defaultValue(false).build(),
        iotwebconf::Builder<iotwebconf::IntTParameter<int16_t>>("bp8").label(paramRelayButtonPinNameLabel).defaultValue(RELAY8_BUTTON_PIN).min(0).max(40).step(1).placeholder("0..40").build(),
        iotwebconf::ParameterGroup("Relay 8","Relay 8")
    },
#endif
};
RelayParamsAuto relayParamsAuto[]=
{
    {
        iotwebconf::Builder<iotwebconf::SelectTParameter<LILYGO_WORD_CONFIG_LEN>>("m1").label(paramChooseMeasureNameLabel).optionValues((const char*)measureNamesValues).optionNames((const char*)measureNamesValues).optionCount(sizeof(measureNamesValues) / LILYGO_WORD_CONFIG_LEN).nameLength(LILYGO_WORD_CONFIG_LEN).defaultValue(measureNamesValues[FREE_INDEX]).build(),
        iotwebconf::Builder<iotwebconf::SelectTParameter<LILYGO_WORD_CONFIG_LEN>>("rf1").label(paramRiseFallNameLabel).optionValues((const char*)riseFallNamesValues).optionNames((const char*)riseFallNamesValues).optionCount(sizeof(riseFallNamesValues) / LILYGO_WORD_CONFIG_LEN).nameLength(LILYGO_WORD_CONFIG_LEN).defaultValue(riseFallNamesValues[0]).build(),
        iotwebconf::Builder<iotwebconf::FloatTParameter>("f1").label(paramFallNameLabel).defaultValue(0.0).step(0.1).placeholder("e.g. 24.8").build(),
        iotwebconf::Builder<iotwebconf::FloatTParameter>("r1").label(paramRiseNameLabel).defaultValue(0.0).step(0.1).placeholder("e.g. 24.8").build(),
    },
    {
        iotwebconf::Builder<iotwebconf::SelectTParameter<LILYGO_WORD_CONFIG_LEN>>("m2").label(paramChooseMeasureNameLabel).optionValues((const char*)measureNamesValues).optionNames((const char*)measureNamesValues).optionCount(sizeof(measureNamesValues) / LILYGO_WORD_CONFIG_LEN).nameLength(LILYGO_WORD_CONFIG_LEN).defaultValue(measureNamesValues[FREE_INDEX]).build(),
        iotwebconf::Builder<iotwebconf::SelectTParameter<LILYGO_WORD_CONFIG_LEN>>("rf2").label(paramRiseFallNameLabel).optionValues((const char*)riseFallNamesValues).optionNames((const char*)riseFallNamesValues).optionCount(sizeof(riseFallNamesValues) / LILYGO_WORD_CONFIG_LEN).nameLength(LILYGO_WORD_CONFIG_LEN).defaultValue(riseFallNamesValues[0]).build(),
        iotwebconf::Builder<iotwebconf::FloatTParameter>("f2").label(paramFallNameLabel).defaultValue(0.0).step(0.1).placeholder("e.g. 24.8").build(),
        iotwebconf::Builder<iotwebconf::FloatTParameter>("r2").label(paramRiseNameLabel).defaultValue(0.0).step(0.1).placeholder("e.g. 24.8").build(),
    },
    {
        iotwebconf::Builder<iotwebconf::SelectTParameter<LILYGO_WORD_CONFIG_LEN>>("m3").label(paramChooseMeasureNameLabel).optionValues((const char*)measureNamesValues).optionNames((const char*)measureNamesValues).optionCount(sizeof(measureNamesValues) / LILYGO_WORD_CONFIG_LEN).nameLength(LILYGO_WORD_CONFIG_LEN).defaultValue(measureNamesValues[FREE_INDEX]).build(),
        iotwebconf::Builder<iotwebconf::SelectTParameter<LILYGO_WORD_CONFIG_LEN>>("rf3").label(paramRiseFallNameLabel).optionValues((const char*)riseFallNamesValues).optionNames((const char*)riseFallNamesValues).optionCount(sizeof(riseFallNamesValues) / LILYGO_WORD_CONFIG_LEN).nameLength(LILYGO_WORD_CONFIG_LEN).defaultValue(riseFallNamesValues[0]).build(),
        iotwebconf::Builder<iotwebconf::FloatTParameter>("f3").label(paramFallNameLabel).defaultValue(0.0).step(0.1).placeholder("e.g. 24.8").build(),
        iotwebconf::Builder<iotwebconf::FloatTParameter>("r3").label(paramRiseNameLabel).defaultValue(0.0).step(0.1).placeholder("e.g. 24.8").build(),
    },
    {
        iotwebconf::Builder<iotwebconf::SelectTParameter<LILYGO_WORD_CONFIG_LEN>>("m4").label(paramChooseMeasureNameLabel).optionValues((const char*)measureNamesValues).optionNames((const char*)measureNamesValues).optionCount(sizeof(measureNamesValues) / LILYGO_WORD_CONFIG_LEN).nameLength(LILYGO_WORD_CONFIG_LEN).defaultValue(measureNamesValues[FREE_INDEX]).build(),
        iotwebconf::Builder<iotwebconf::SelectTParameter<LILYGO_WORD_CONFIG_LEN>>("rf4").label(paramRiseFallNameLabel).optionValues((const char*)riseFallNamesValues).optionNames((const char*)riseFallNamesValues).optionCount(sizeof(riseFallNamesValues) / LILYGO_WORD_CONFIG_LEN).nameLength(LILYGO_WORD_CONFIG_LEN).defaultValue(riseFallNamesValues[0]).build(),
        iotwebconf::Builder<iotwebconf::FloatTParameter>("f4").label(paramFallNameLabel).defaultValue(0.0).step(0.1).placeholder("e.g. 24.8").build(),
        iotwebconf::Builder<iotwebconf::FloatTParameter>("r4").label(paramRiseNameLabel).defaultValue(0.0).step(0.1).placeholder("e.g. 24.8").build(),
    },
};


bool changeRelay(int index, bool state){

    if(relayParamsBasic[index].relayStateParam.value() != state){
        relayParamsBasic[index].relayStateParam.value() = state;
        logd("Turning Relay %d %s.", index+1, state?"on":"off");
        return true;
    }
    logd("Relay %d was already in the %s state.", index+1, state?"on":"off");
    return false;
}



bool lilygoAction(String a){
    bool configNeedsUpdate = false;
    String actionStr = a;
    actionStr.trim();
    char action = actionStr.charAt(0);

    //Which one has been clicked?
    int index = -1;
    switch (action) {
        case RELAYON[0]...RELAYON[RELAYS-1]:
            index = action - RELAYON[0];
            break;
        case RELAYOFF[0]...RELAYOFF[RELAYS-1]:
            index = action - RELAYOFF[0];
            break;
    }
    if (index != -1){
        //Only change if the requested is actually different.
        configNeedsUpdate = changeRelay(index,RELAYON[index]==action);
    }

    logd("Index in action = %d configNeedsUpdate %s", index, configNeedsUpdate?"true":"false");
    return configNeedsUpdate;
};

String lilygoBuildAction(){
    static char buffer[120]; 
    sprintf(buffer, "<br>SOC = %.0f BatVolts = %.1f WBCurr = %.1f PVCurr = %.1f data %ds ago", 
          relayMeasures.relaySOC, 
          relayMeasures.relayBatVoltage,
          relayMeasures.relayWhizbangBatCurrent, 
          relayMeasures.relayPVCurrent,
          relayMeasures.updateTime==0?0:(millis() - relayMeasures.updateTime)/1000);


	String s = buffer;
    s += "<table><tr><th align=\"left\">Name</th><th align=\"left\">State</th><th align=\"left\">Control</th></tr>";

    for (int i=0; i<RELAYS; i++){
        s += "<tr><td align=\"left\">";
        s +=      relayParamsBasic[i].relayNameParam.value();
        s +=      "</td><td align=\"left\">";
        s +=      relayParamsBasic[i].relayStateParam.isChecked()?" ON":" OFF";
        s +=      "</td><td align=\"left\"><button type='button' onclick=\"location.href='?action=";
        s +=          String(RELAYON[i]);
        s +=          "';\" > ON  </button> <button type='button' onclick=\"location.href='?action=";
        s +=          String(RELAYOFF[i]);
        s +=          "';\" > OFF </button>";
        if (i<4){
            if (strcmp(relayParamsAuto[i].relayMeasureParam.value(),measureNamesValues[FREE_INDEX])!=0 ){
                char buffer2[50];
                sprintf(buffer2, " AUTO %s/%.1f/%.1f/%s", 
                    relayParamsAuto[i].relayMeasureParam.value(),
                    relayParamsAuto[i].relayFallParam.value(),
                    relayParamsAuto[i].relayRiseParam.value(),
                    relayParamsAuto[i].relayRiseFallParam.value());
                s += buffer2;
            }
        }
        s += "</td></tr>";
    }
    s += "</table><br><br><div><button type='button' onclick=\"location.href='?';\" > Refresh </button></div>";
    s += "<br><br>";
    s += "</table><div><button type='button' onclick=\"location.href='reset';\" > Reset Device </button></div><br><br>";

    return s;
}

void lilygocheckUpdatePins(){
    for (int i=0; i<RELAYS; i++){
        if (digitalRead(relayParamsBasic[i].relayPin) != (relayParamsBasic[i].relayStateParam.isChecked()?HIGH:LOW)){
            digitalWrite(relayParamsBasic[i].relayPin, (relayParamsBasic[i].relayStateParam.isChecked()?HIGH:LOW));
        }
    }
};

void lilygoInitializePins(){
 	//Initialize the Relay control pins.
    for (int i=0; i<RELAYS; i++){
     	pinMode(relayParamsBasic[i].relayPin, OUTPUT);
        int16_t pin = relayParamsBasic[i].relayButtonPinParam.value();
        if (pin != 0){
            logd("setting button pin pullup for pin %d", pin);
            pinMode(pin, INPUT_PULLUP);
        }
    }
};


void lilgoUpdateRelaysFromSaved(){
    //Set the relay with what the saved param values were.
    for (int i=0; i<RELAYS; i++){
	    digitalWrite(relayParamsBasic[i].relayPin, relayParamsBasic[i].relayStateParam.isChecked()?HIGH:LOW);
    }
};

void setupRelayGroups(){
    for (int i=0; i<RELAYS; i++){
        relayParamsBasic[i].relayGroup.addItem(&relayParamsBasic[i].relayNameParam);
        relayParamsBasic[i].relayGroup.addItem(&relayParamsBasic[i].relayStateParam);
        if (i<4){
            relayParamsBasic[i].relayGroup.addItem(&relayParamsAuto[i].relayMeasureParam);
            relayParamsBasic[i].relayGroup.addItem(&relayParamsAuto[i].relayRiseFallParam);
            relayParamsBasic[i].relayGroup.addItem(&relayParamsAuto[i].relayFallParam);
            relayParamsBasic[i].relayGroup.addItem(&relayParamsAuto[i].relayRiseParam);
        }
        relayParamsBasic[i].relayGroup.addItem(&relayParamsBasic[i].relayButtonPinParam);
    }
}

bool debounce(unsigned long pressedTime){
	bool returnVal = pressedTime-lastPressedTime > BUTTON_DEBOUNCE_TIME;
    if (returnVal)
		lastPressedTime = pressedTime;
	return returnVal;
}


bool lilygoDoLoop(){
    bool configNeedsUpdate = false;

  	// -- Check for button push
    for (int i=0; i<RELAYS; i++){
        int16_t thePin = relayParamsBasic[i].relayButtonPinParam.value();
        if (thePin != 0) {
            if ((digitalRead(thePin) == LOW) && debounce(millis()))
            {
                configNeedsUpdate = changeRelay(i,!relayParamsBasic[i].relayStateParam.value()); //Toggle the relay
                logd("Button Pushed - configNeedsUpdate true for relay %d", i+1);
            }
        }
    }    

    return configNeedsUpdate;

}


bool handleMeasure(int relayIndex, float thisMeasure, float fLevel, float rLevel, bool fallOff){
    //multiple them by 100 and compare them as doubles.
    long fLong, rLong;
    fLong = long((fLevel*10)+0.5);
    rLong = long((rLevel*10)+0.5);

    if (fLong > rLong){
        loge("Fall level %.1f is > Rise level %.1f, skipping evaluation.",fLevel, rLevel);

    } else {
        //Handle Fall
        if (thisMeasure < fLevel){
            logd("Value %.1f is less than fall value %.1f",thisMeasure, fLevel);
            //When rising we must set the relay state to the opposite as what is stored in fallOff 
            return changeRelay(relayIndex,!fallOff);
        } else {
            logd("Value %.1f is >= to fall value %.1f",thisMeasure, fLevel);
        }

        //Handle Rise
        if (thisMeasure >= rLevel){
            logd("Value %.1f is equal or more than rise value %.1f",thisMeasure, rLevel);
            //When rising we must set the relay state to the same as what is stored in fallOff 
            return changeRelay(relayIndex,fallOff);
        } else {
            logd("Value %.1f is < rise value %.1f",thisMeasure, rLevel);
        }
    }

    return false;
}

bool lilygoHandleRelays(){
    bool retVal= false;
    //Test any relays that are auto against the stored data
    logd("In Handle Relays");
    for (int i = 0; i<4; i++){ //only do the first 4 - they are the only AUTO ones.
        logd("index %d %s - %s", i, relayParamsBasic[i].relayNameParam.value(), relayParamsAuto[i].relayMeasureParam.value());
        if (strcmp(relayParamsAuto[i].relayMeasureParam.value(),  measureNamesValues[FREE_INDEX])!=0){

            float riseLevel = relayParamsAuto[i].relayRiseParam.value();
            float fallLevel = relayParamsAuto[i].relayFallParam.value();
            bool fallOffMode = strcmp(relayParamsAuto[i].relayRiseFallParam.value(), riseFallNamesValues[FALLOFF_INDEX])==0;
            float measureValue = 0.0;

            if (strcmp(relayParamsAuto[i].relayMeasureParam.value(), measureNamesValues[SOC_INDEX])==0)
                measureValue = relayMeasures.relaySOC;
            else if (strcmp(relayParamsAuto[i].relayMeasureParam.value(), measureNamesValues[BV_INDEX])==0)
                measureValue = relayMeasures.relayBatVoltage;
            else if (strcmp(relayParamsAuto[i].relayMeasureParam.value(), measureNamesValues[BC_INDEX])==0)
                measureValue = relayMeasures.relayWhizbangBatCurrent;
            else if (strcmp(relayParamsAuto[i].relayMeasureParam.value(), measureNamesValues[PC_INDEX])==0)
                measureValue = relayMeasures.relayPVCurrent;

            //Cannot use || here because once retVal is true, it does not need to call handleMeasure again.
            if (handleMeasure(i, measureValue, fallLevel, riseLevel, fallOffMode)){
                retVal = true;
            };
        }
    }
    return retVal;
}